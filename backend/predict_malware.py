import sys
import joblib
import pefile
import pandas as pd

def check_signatures(file_path):
    """
    Reads the content of a file and checks for known malicious signatures.
    """
    signatures = [
        b"EICAR-STANDARD-ANTIVIRUS-TEST-FILE",
    ]
    try:
        with open(file_path, "rb") as f:
            file_content = f.read()
            for sig in signatures:
                if sig in file_content:
                    return True # Signature found
    except Exception:
        pass
    return False # No signatures found

def extract_pe_features(file_path):
    feature_columns = ['e_magic', 'e_cblp', 'e_cp', 'e_crlc', 'e_cparhdr', 'e_minalloc', 'e_maxalloc', 'e_ss', 'e_sp', 'e_csum', 'e_ip', 'e_cs', 'e_lfarlc', 'e_ovno', 'e_oemid', 'e_oeminfo', 'e_lfanew', 'Machine', 'NumberOfSections', 'TimeDateStamp', 'PointerToSymbolTable', 'NumberOfSymbols', 'SizeOfOptionalHeader', 'Characteristics', 'Magic', 'MajorLinkerVersion', 'MinorLinkerVersion', 'SizeOfCode', 'SizeOfInitializedData', 'SizeOfUninitializedData', 'AddressOfEntryPoint', 'BaseOfCode', 'BaseOfData', 'ImageBase', 'SectionAlignment', 'FileAlignment', 'MajorOperatingSystemVersion', 'MinorOperatingSystemVersion', 'MajorImageVersion', 'MinorImageVersion', 'MajorSubsystemVersion', 'MinorSubsystemVersion', 'SizeOfImage', 'SizeOfHeaders', 'CheckSum', 'Subsystem', 'DllCharacteristics', 'SizeOfStackReserve', 'SizeOfStackCommit', 'SizeOfHeapReserve', 'SizeOfHeapCommit', 'LoaderFlags', 'NumberOfRvaAndSizes']
    live_df = pd.DataFrame(columns=feature_columns)
    live_df.loc[0] = 0
    try:
        pe = pefile.PE(file_path)
        for feature in feature_columns:
            if hasattr(pe, feature):
                live_df.at[0, feature] = getattr(pe, feature)
            elif hasattr(pe, 'OPTIONAL_HEADER') and hasattr(pe.OPTIONAL_HEADER, feature):
                live_df.at[0, feature] = getattr(pe.OPTIONAL_HEADER, feature)
            elif hasattr(pe, 'FILE_HEADER') and hasattr(pe.FILE_HEADER, feature):
                live_df.at[0, feature] = getattr(pe.FILE_HEADER, feature)
    except pefile.PEFormatError:
        return None
    except Exception:
        pass
    return live_df

try:
    file_to_check = sys.argv[1]

    # First, check for simple text-based signatures
    if check_signatures(file_to_check):
        print(1) # Threat
        sys.exit()

    # If no signature, proceed with ML analysis
    model = joblib.load('model_malware.pkl')
    live_features = extract_pe_features(file_to_check)

    if live_features is None:
        print(0) # Not an executable, classify as clean
        sys.exit()

    prediction = model.predict(live_features)
    print(prediction[0])
except Exception as e:
    print(f"Error in Python script: {e}", file=sys.stderr)
    sys.exit(1)